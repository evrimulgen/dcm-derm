/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package in.raster.mayam.form;

import in.raster.mayam.context.ApplicationContext;
import in.raster.mayam.models.StudyModel;
import in.raster.mayam.models.TrackingModel;
import in.raster.mayam.models.TrackingStudy;
import java.awt.Component;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.TransferHandler;


/**
 *
 * @author mariano
 */
public class CreateTrackFrame extends javax.swing.JFrame {

    /**
     * Creates new form CreateTrackFrame
     */
    public CreateTrackFrame(String localPatientId, TrackingModel trackingModel) {
        initComponents();
        patientStudies.setDragEnabled(true);
        patientStudies.setDropMode(DropMode.INSERT);
        patientStudies.setTransferHandler(new ListTransferHandler());
        patientStudies.setCellRenderer(new ListRenderer());
        patientTrackList.setDragEnabled(true);
        patientTrackList.setDropMode(DropMode.INSERT);
        patientTrackList.setTransferHandler(new ListTransferHandler());
        patientTrackList.setCellRenderer(new ListRenderer());
        List<StudyModel> currentStudies = new ArrayList<StudyModel>();
        if (trackingModel != null) {
            currentStudies = ApplicationContext.databaseRef.listStudiesByTrackId(trackingModel.getTrackId());
            for (StudyModel study : currentStudies) {
                ((DefaultListModel)patientTrackList.getModel()).addElement(study);
            }
            this.description.setText(trackingModel.getDescription());
            this.dateCreation.setDate(trackingModel.getCreationDate());
        }
        List<StudyModel> studies = ApplicationContext.databaseRef.listLocalStudiesByPatientId(localPatientId);
        for (StudyModel study : studies) {
            if (!currentStudies.contains(study)) {
                ((DefaultListModel)patientStudies.getModel()).addElement(study);
            }
        }
        this.patientName.setText(ApplicationContext.databaseRef.getPatientNameByLocalId(localPatientId));
        this.localPatientId = localPatientId;
        this.trackingModel = trackingModel;
    }    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        patientStudies = new javax.swing.JList();
        jScrollPane1 = new javax.swing.JScrollPane();
        patientTrackList = new javax.swing.JList();
        createButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        description = new javax.swing.JTextField();
        dateCreation = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        patientName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(ApplicationContext.currentBundle.getString("CreateTrackFrame.title")); // NOI18N

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Descripcion:");

        jLabel2.setText("Fecha Creacion:");

        patientStudies.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(patientStudies);

        patientTrackList.setModel(new DefaultListModel());
        jScrollPane1.setViewportView(patientTrackList);

        createButton.setText(ApplicationContext.currentBundle.getString("BodyJFrame.save.text")); // NOI18N
        createButton.setPreferredSize(new java.awt.Dimension(92, 29));
        createButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(ApplicationContext.currentBundle.getString("CancelButton")); // NOI18N
        cancelButton.setPreferredSize(new java.awt.Dimension(92, 29));
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        dateCreation.setDateFormatString("yyyyMMdd");

        jLabel3.setText("Estudios disponibles:");

        jLabel4.setText("Orden Nuevo Seguimiento:");

        jLabel5.setText("Paciente:");

        patientName.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 569, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(dateCreation, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addGap(18, 18, 18)
                                        .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)))
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(dateCreation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(patientName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 315, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void createButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createButtonActionPerformed
        if (this.patientTrackList.getModel().getSize() == 0) {
            JOptionPane.showMessageDialog(this,ApplicationContext.currentBundle.getString("Alert.patientTracking.empty"),
                ApplicationContext.currentBundle.getString("Alert.warning.text"),JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (this.description.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this,ApplicationContext.currentBundle.getString("Alert.descritionTracking.empty"),
                ApplicationContext.currentBundle.getString("Alert.warning.text"),JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (this.dateCreation.getDate() == null) {
            JOptionPane.showMessageDialog(this,ApplicationContext.currentBundle.getString("Alert.dateCreationTracking.empty"),
                ApplicationContext.currentBundle.getString("Alert.warning.text"),JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if (trackingModel == null) {
            trackingModel = new TrackingModel();
            trackingModel.setDescription(description.getText().trim());
            trackingModel.setCreationDate(new java.text.SimpleDateFormat("yyyyMMdd").format(dateCreation.getDate()));
            trackingModel.setPatientId(localPatientId);
        }
        List<TrackingStudy> list = new ArrayList<TrackingStudy>();
        for (int i=0; i<patientTrackList.getModel().getSize(); i++) {
            StudyModel study = (StudyModel)patientTrackList.getModel().getElementAt(i);
            TrackingStudy ts = new TrackingStudy();
            ts.setOrderNumber(i);
            ts.setStudyUID(study.getStudyUID());
            list.add(ts);
        }
        trackingModel.setStudies(list);
        if (trackingModel.getTrackId() == -1) {
            ApplicationContext.databaseRef.insertTrackRecord(trackingModel);
        } else {
            ApplicationContext.databaseRef.updateTrackRecord(trackingModel);
        }
        JOptionPane.showMessageDialog(this, ApplicationContext.currentBundle.getString("Tracking.changes.saved"));
    }//GEN-LAST:event_createButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton createButton;
    private com.toedter.calendar.JDateChooser dateCreation;
    private javax.swing.JTextField description;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField patientName;
    private javax.swing.JList patientStudies;
    private javax.swing.JList patientTrackList;
    // End of variables declaration//GEN-END:variables
    private String localPatientId;
    private TrackingModel trackingModel;
    
    private class ListTransferHandler extends TransferHandler {
        private int selectedIndex = -1;
        private final DataFlavor LIST_ITEM_DATA_FLAVOR = new DataFlavor(StudyModel.class, "java/StudyModel");
        private boolean reorder = false;
        
        @Override
        public boolean canImport(TransferHandler.TransferSupport info) {
            info.getDataFlavors();
            if (!info.isDataFlavorSupported(LIST_ITEM_DATA_FLAVOR)) {
                return false;
            }
            return true;
       }

        @Override
        protected Transferable createTransferable(JComponent c) {
            Transferable t = null;
            if (c instanceof JList) {
                JList list = (JList) c;
                selectedIndex = list.getSelectedIndex();
                Object value = list.getSelectedValue();
                if (value instanceof StudyModel) {
                    StudyModel li = (StudyModel) value;
                    t = new ListItemTransferable(li);
                }
            }
            return t;
        }

        @Override
        public int getSourceActions(JComponent c) {
            return TransferHandler.MOVE;
        }

        @Override
        public boolean importData(TransferHandler.TransferSupport info) {
            if (!info.isDrop()) {
                return false;
            }

            JList list = (JList)info.getComponent();
            DefaultListModel listModel = (DefaultListModel)list.getModel();
            JList.DropLocation dl = (JList.DropLocation)info.getDropLocation();
            int index = dl.getIndex();

            Transferable t = info.getTransferable();
            StudyModel data;
            try {
                data = (StudyModel)t.getTransferData(LIST_ITEM_DATA_FLAVOR);
            } 
            catch (Exception e) { 
                return false; 
            }
            
            if (listModel.contains(data)) {
                listModel.removeElement(data);
                reorder = true;
                if (listModel.size()<index) {
                    index = listModel.size();
                } else if (listModel.size() == index) {
                    index--;
                }
            }
            
            listModel.add(index++, data);
            
            return true;
        }

        /**
         * Remove the items moved from the list.
         */
        @Override
        protected void exportDone(JComponent c, Transferable data, int action) {
            JList source = (JList)c;
            DefaultListModel listModel  = (DefaultListModel)source.getModel();

            if (action == TransferHandler.MOVE && selectedIndex != -1 && !reorder) {
                listModel.remove(selectedIndex);
            }
            selectedIndex = -1;
            reorder=false;
        }
    }
    
    private class ListRenderer extends JLabel implements ListCellRenderer {

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
            String s = "";
            if (value != null)  {
                s = ((StudyModel)value).getStudyDate() + "-" + ((StudyModel)value).getStudyDescription();
            }
            setText(s);
            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            return this;
        }
    
    }
    
    private class ListItemTransferable implements Transferable {

        private final DataFlavor LIST_ITEM_DATA_FLAVOR = new DataFlavor(StudyModel.class, "java/StudyModel");
        private StudyModel listItem;

        public ListItemTransferable(StudyModel listItem) {
            this.listItem = listItem;
        }

        @Override
        public DataFlavor[] getTransferDataFlavors() {
            return new DataFlavor[]{LIST_ITEM_DATA_FLAVOR};
        }

        @Override
        public boolean isDataFlavorSupported(DataFlavor flavor) {
            return flavor.equals(LIST_ITEM_DATA_FLAVOR);
        }

        @Override
        public Object getTransferData(DataFlavor flavor) throws UnsupportedFlavorException, IOException {
            if (LIST_ITEM_DATA_FLAVOR.equals(flavor)) {
                return listItem;
            }
            return null;
        }
    }

}
