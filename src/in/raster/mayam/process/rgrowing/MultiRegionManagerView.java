/*
 * Image/J Plugins
 * Copyright (C) 2002-2013 Jarek Sacha
 * Author's email: jsacha at users dot sourceforge dot net
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * Latest release available at http://sourceforge.net/projects/ij-plugins/
 */

package in.raster.mayam.process.rgrowing;

import com.jgoodies.binding.PresentationModel;
import com.jgoodies.binding.adapter.BasicComponentFactory;
import com.jgoodies.binding.beans.PropertyConnector;
import com.jgoodies.binding.list.SelectionInList;
import com.jgoodies.binding.value.ValueHolder;
import com.jgoodies.binding.value.ValueModel;
import ij.ImagePlus;
import net.sf.ij_plugins.ui.UIUtils;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import net.sf.ij_plugins.ui.multiregion.Region;
import org.netbeans.lib.awtextra.AbsoluteConstraints;
import org.netbeans.lib.awtextra.AbsoluteLayout;


/**
 * @author Jarek Sacha
 */
public class MultiRegionManagerView extends JDialog {

    private final MultiRegionManagerModel model = new MultiRegionManagerModel();

    private final ListModel regionListModel = this.model.getRegions();
    private final ValueHolder regionSelectedItemHolder = new ValueHolder();
    private final SelectionInList<Region> regionSelectionInList = new SelectionInList<>(regionListModel, regionSelectedItemHolder);

    private final PresentationModel<Region> detailsModel = new PresentationModel<Region>(regionSelectionInList);
    private final ValueModel subRegionsValueModel = detailsModel.getModel(Region.PROPERTYNAME_SUB_REGIONS);
    private final ValueHolder subRegionSelectedItemHolder = new ValueHolder();
    private final SelectionInList<Region> subRegionSelectionInList = new SelectionInList<>(subRegionsValueModel, subRegionSelectedItemHolder);

    private static final long serialVersionUID = 3522389261778035936L;

    private JPanel drwPane;
    
    //private RunAction runAction;

    /**
     * Creates new form MultiRegionManagerView
     */
    public MultiRegionManagerView(ImagePlus imgp) {
        model.setImageSource(imgp);
        this.model.setParent(this);
        this.drwPane = new DrawingPanel(imgp);
        //runAction = new RunAction(new RegionGrowingModel(model), this);
        initComponents();
        regionList.setCellRenderer(new RegionCellRenderer());
        // Bind selection in regionList to model's selectedRegion
        PropertyConnector.connectAndUpdate(regionSelectedItemHolder, model, "selectedRegion");
        PropertyConnector.connectAndUpdate(subRegionSelectedItemHolder, model, "selectedSubRegion");
        regionSelectedItemHolder.setIdentityCheckEnabled(true);
    }


    public MultiRegionManagerModel getModel() {
        return model;
    }


//    public static void main(final String[] args) {
//        SwingUtilities.invokeLater(new Runnable() {
//
//            @Override
//            public void run() {
//                final JPanel panel = new MultiRegionManagerView(null);
//
//                final JFrame frame = new JFrame();
//                frame.getContentPane().add(panel);
//                frame.pack();
//                frame.setLocationRelativeTo(null);
//                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//                frame.setVisible(true);
//            }
//        });
//    }


    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        final JMenuItem toROIManagerMenuItem = new JMenuItem();
        JMenuItem fromROIManagerMenuItem = new JMenuItem();
        JPanel jPanel1 = new JPanel();
        JScrollPane rgrowingImgPane = new JScrollPane(drwPane);
        final JScrollPane regionScrollPane = new JScrollPane();
        final JLabel regionLabel = new JLabel();
        final JScrollPane subRegionScrollPane = new JScrollPane();
        final JLabel roiLabel = new JLabel();
        final JButton addROIButton = new JButton(model.createAddCurrentROIAction());
        final JButton removeROIButton = new JButton(model.createRemoveSubRegionAction());
        final JSeparator jSeparator1 = new JSeparator();
        JButton okButton = new JButton();

        toROIManagerMenuItem.setText("Send to ROI Manager");
        toROIManagerMenuItem.setToolTipText("Send all ROIs in this region to ROI Manager");
        toROIManagerMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                toROIManagerMenuItemActionPerformed(evt);
            }
        });
        regionPopupMenu.add(toROIManagerMenuItem);

        fromROIManagerMenuItem.setText("Load from ROI Manager");
        fromROIManagerMenuItem.setToolTipText("Load ROIs in this region from ROI Manager");
        fromROIManagerMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                fromROIManagerMenuItemActionPerformed(evt);
            }
        });
        regionPopupMenu.add(fromROIManagerMenuItem);

        setModalityType(ModalityType.APPLICATION_MODAL);
        setResizable(false);

        jPanel1.setLayout(new AbsoluteLayout());

        rgrowingImgPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        rgrowingImgPane.setVerticalScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jPanel1.add(rgrowingImgPane, new AbsoluteConstraints(6, 6, 391, 296));

        regionList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        regionList.setSelectedIndex(0);
        regionList.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                regionListMouseClicked(evt);
            }
        });
        regionScrollPane.setViewportView(regionList);

        jPanel1.add(regionScrollPane, new AbsoluteConstraints(403, 59, 138, 61));

        regionLabel.setText("Regions");
        jPanel1.add(regionLabel, new AbsoluteConstraints(403, 38, -1, -1));

        subRegionList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        subRegionScrollPane.setViewportView(subRegionList);

        jPanel1.add(subRegionScrollPane, new AbsoluteConstraints(403, 153, 138, 58));

        roiLabel.setHorizontalAlignment(SwingConstants.RIGHT);
        roiLabel.setText("ROIs");
        roiLabel.setHorizontalTextPosition(SwingConstants.RIGHT);
        jPanel1.add(roiLabel, new AbsoluteConstraints(403, 132, 32, -1));

        addROIButton.setText("+ ROI");
        addROIButton.setToolTipText("Add ROI from current image to selected region.");
        addROIButton.setHorizontalAlignment(SwingConstants.LEADING);
        jPanel1.add(addROIButton, new AbsoluteConstraints(403, 223, -1, -1));

        removeROIButton.setText("- ROI");
        removeROIButton.setToolTipText("Remove ROI selected in the list.");
        removeROIButton.setHorizontalAlignment(SwingConstants.LEADING);
        jPanel1.add(removeROIButton, new AbsoluteConstraints(477, 223, 64, -1));
        jPanel1.add(jSeparator1, new AbsoluteConstraints(403, 262, 138, 10));

        okButton.setText("Ok");
        okButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        jPanel1.add(okButton, new AbsoluteConstraints(453, 275, -1, -1));

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void regionListMouseClicked(final MouseEvent evt) {//GEN-FIRST:event_regionListMouseClicked
        // if right mouse button clicked (or me.isPopupTrigger())
//        if (SwingUtilities.isRightMouseButton(evt)
//                && !regionList.isSelectionEmpty()
//                && regionList.locationToIndex(evt.getPoint())
//                == regionList.getSelectedIndex()) {
//            regionPopupMenu.show(regionList, evt.getX(), evt.getY());
//        }

    }//GEN-LAST:event_regionListMouseClicked


    private void toROIManagerMenuItemActionPerformed(final ActionEvent evt) {//GEN-FIRST:event_toROIManagerMenuItemActionPerformed
        model.sentCurrentRegionToROIManager();
    }//GEN-LAST:event_toROIManagerMenuItemActionPerformed


    private void fromROIManagerMenuItemActionPerformed(final ActionEvent evt) {//GEN-FIRST:event_fromROIManagerMenuItemActionPerformed
        model.loadCurrentRegionFromROIManager();
    }//GEN-LAST:event_fromROIManagerMenuItemActionPerformed

    private void okButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private final JList regionList = BasicComponentFactory.createList(regionSelectionInList);
    private final JPopupMenu regionPopupMenu = new JPopupMenu();
    private final JList subRegionList = BasicComponentFactory.createList(subRegionSelectionInList);
    // End of variables declaration//GEN-END:variables


    static class RegionCellRenderer extends JLabel implements ListCellRenderer {

        private static final int ICON_SIZE = 10;
        private static final long serialVersionUID = 1L;

        // This is the only method defined by ListCellRenderer.
        // We just reconfigure the JLabel each time we're called.


        @Override
        public Component getListCellRendererComponent(
                final JList list,              // the list
                final Object value,            // value to display
                final int index,               // cell index
                final boolean isSelected,      // is the cell selected
                final boolean cellHasFocus)    // does the cell have focus
        {
            final String text;
            final Color color;
            if (value instanceof Region) {
                final Region r = (Region) value;
                text = r.getName();
                // Get color without alpha
                color = new Color(r.getColor().getRGB());
            } else {
                text = value.toString();
                color = new Color(0, 0, 0, 255);
            }

            setText(text);

            // Create icon
            setIcon(UIUtils.createColorIcon(ICON_SIZE, ICON_SIZE, color));

            if (isSelected) {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            } else {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setEnabled(list.isEnabled());
            setFont(list.getFont());
            setOpaque(true);
            return this;
        }
    }

    private class DrawingPanel extends JPanel implements MouseMotionListener, MouseListener{
            Rectangle selection;
            Point anchor;
            ImagePlus image;
            
            public DrawingPanel(ImagePlus image){
                addMouseListener(this);
                addMouseMotionListener(this);
                this.image=image;
            }
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                Graphics2D g2d = (Graphics2D)g;
                g2d.drawImage(image.getBufferedImage(), 0, 0, null);
                if (selection!=null){
                    g2d.draw(selection);
                }
            }
            @Override
            public void mousePressed(MouseEvent e) {
                anchor = e.getPoint();
                selection = new Rectangle(anchor);
            }
            @Override
            public void mouseDragged(MouseEvent e) {
                selection.setBounds( (int)Math.min(anchor.x,e.getX()), (int)Math.min(anchor.y,e.getY()),
                        (int)Math.abs(e.getX()-anchor.x), (int)Math.abs(e.getY()-anchor.y));
                repaint();
            }
            @Override
            public void mouseReleased(MouseEvent e) {
                image.setRoi(selection);
            }
            @Override
            public void mouseMoved(MouseEvent e) {}
            @Override
            public void mouseClicked(MouseEvent e) {}
            @Override
            public void mouseEntered(MouseEvent e) {}
            @Override
            public void mouseExited(MouseEvent e) {}
            
            @Override
            public Dimension getPreferredSize() {
                return new Dimension(image.getWidth(), image.getHeight());
            }
            
        }
   
}
